<?xml version="1.0"?>

<ruleset name="LuBanCollection" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>LuBanCollection</description>

    <rule name="EqualsHashCodeRule"
          language="java"
          class="com.intellij.plugins.bodhi.pmd.lang.java.rule.collection.EqualsHashCodeRule">
        <description>
            1.只要重写 equals，就必须重写 hashCode；
        </description>
        <priority>3</priority>
    </rule>

    <rule name="MapSetKeyMustEqualsHashCodeRule"
          language="java"
          class="com.intellij.plugins.bodhi.pmd.lang.java.rule.collection.MapSetKeyMustEqualsHashCodeRule">
        <description>
            2.因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法；
            3.如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。
        </description>
        <priority>3</priority>
    </rule>


    <rule name="AvoidUseCollectionSizeRule"
          language="java"
          message="{0}判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            （二）【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//InfixExpression[@Operator = "=="][NumericLiteral[@Image="0"] and (.//MethodCall[pmd-java:matchesSig("java.util.Collection#size()")]
 or .//MethodCall[pmd-java:matchesSig("java.util.Map#size()")])]

]]>
                </value>
            </property>
        </properties>
        <example>
        <![CDATA[
            说明：前者的时间复杂度为 O(1)，而且可读性更好。
            正例：
            Map<String, Object> map = new HashMap<>();
            if(map.isEmpty()) {
            System.out.println("no element in this map.");
            }
        ]]>
        </example>
    </rule>


    <rule name="CollectorsToMapMustMergeFunctionRule"
          language="java"
          message="message"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            （三）【强制】在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要使用含有参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key值时会抛IllegalStateException 异常
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[pmd-java:matchesSig('java.util.stream.Collectors#toMap(_,_)')]
]]>
                </value>
            </property>
        </properties>
        <example>
        <![CDATA[
             List<Pair<String, Double>> pairArrayList = new ArrayList<>(3);
        pairArrayList.add(new MutablePair<>("version", 6.19));
        pairArrayList.add(new MutablePair<>("version", 10.24));
        pairArrayList.add(new MutablePair<>("version", 13.14));

        // 正例 生成的 map 集合中只有一个键值对：{version=13.14}
        Map<String, Double> map1 = pairArrayList.stream().collect(
                Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -> v2));
        //  反例： java.lang.IllegalStateException: Duplicate key version
        map1 = pairArrayList.stream().collect(
                Collectors.toMap(Pair::getKey, Pair::getValue));
        ]]>
        </example>
    </rule>

    <rule name="ConcurrentExceptionWithModifyOriginSubListRule"
          language="java"
          message="{0}"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            【强制】在 subList 场景高度注意对父集合元素的增加或删除均会导致子列表的遍历、增加、删除产生 ConcurrentModificationException 异常。
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[

//LocalVariableDeclaration[
    .//MethodCall[pmd-java:matchesSig('java.util.List#subList(int,int)')]/VariableAccess/@Name=
        ./following-sibling::*//MethodCall[@MethodName='add' or @MethodName='remove' or @MethodName='clear']/VariableAccess/@Name
]
]]>
                </value>
            </property>
        </properties>
        <example>
<![CDATA[
    private static void concurrentModify() {
        List<Pair<String, Double>> pairArrayList = new ArrayList<>(3);
        pairArrayList.add(new MutablePair<>("version", 6.19));
        pairArrayList.add(new MutablePair<>("version", 10.24));
        pairArrayList.add(new MutablePair<>("version", 13.14));

        List<Pair<String, Double>> pairs = pairArrayList.subList(0, 1);
// 上一步用了 pairArrayList.subList ,此时调用 pairArrayList.clear方法，下面操作pairs时会抛出ConcurrentModifyException
        pairArrayList.clear();
//        pairArrayList.add(null);
//        pairArrayList.remove(1);

        System.out.println(pairs.size());

    }
]]>
        </example>
    </rule>

    <rule name="ClassCastExceptionWithToArrayRule"
          language="java"
          message="使用集合转数组的方法必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            （九）【强制】使用集合转数组的方法必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[pmd-java:matchesSig('java.util.List#toArray()')] |
//MethodCall[pmd-java:matchesSig('java.util.List#toArray(_)') and .//NumericLiteral[not(@Image="0")]]
]]>
                </value>
            </property>
        </properties>
        <example>
<![CDATA[
            正例：
            List<String> list = new ArrayList<>(2);
            list.add("guan");
            list.add("bao");
            String[] array = list.toArray(new String[0]);
            说明：使用 toArray 带参方法，数组空间大小的 length，
            1.等于 0，动态创建与 size 相同的数组，性能最好。
            2.大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。
            3.等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。
            4.大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患
]]>
        </example>
    </rule>


    <rule name="CollectionAddAllMustNotNullRule"
          language="java"
          message="（十）【强制】在使用 Collection 接口任何实现类的 addAll()方法时都要对输入的集合参数进行 NPE 判断。"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果为 null，则直接抛出异常。
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[pmd-java:matchesSig('java.util.Collection#addAll(_)') and
not(
./VariableAccess/@Name = ..//parent::Block/parent::IfStatement/InfixExpression[@Operator = '!='][NullLiteral]/VariableAccess/@Name
or ./VariableAccess/@Name =..//parent::Block/parent::IfStatement/MethodCall[@MethodName="nonNull"]/ArgumentList/VariableAccess/@Name
or ./VariableAccess/@Name =..//parent::Block/parent::IfStatement/MethodCall[@MethodName="isNotNull"]/ArgumentList/VariableAccess/@Name
)
]
]]>
                </value>
            </property>
        </properties>
    </rule>


    <rule name="AsListNotAddRule"
          language="java"
          message="【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            （十一）【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//MethodCall[pmd-java:matchesSig('java.util.Arrays#asList(_)')]
/parent::VariableDeclarator[@Name= ./../following-sibling::*//MethodCall[@MethodName='add' or @MethodName='remove' or @MethodName='clear']/VariableAccess/@Name]
]]>
                </value>
            </property>
        </properties>
        <example>
<![CDATA[
    public static void main(String[] args) {
        String[] str = new String[] { "yang", "hao" };
        List list = Arrays.asList(str);
//        异常：java.lang.UnsupportedOperationException
        list.add("1");
        if (!list.isEmpty()) {
            //        异常：java.lang.UnsupportedOperationException
            list.add("2");
        }
    }
]]>

        </example>
    </rule>


    <rule name="CollectionShouldGenericRule"
          language="java"
          message="需要指定泛型"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            需要指定泛型
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//ClassType[pmd-java:typeIsExactly('java.util.List')][not(TypeArguments)]
| //ClassType[pmd-java:typeIsExactly('java.util.Set')][not(TypeArguments)]
| //ClassType[pmd-java:typeIsExactly('java.util.Collection')][not(TypeArguments)]
| //ClassType[pmd-java:typeIsExactly('java.util.Map')][not(TypeArguments)]
| //ClassType[pmd-java:typeIsExactly('java.util.HashMap')][not(TypeArguments)]
| //ClassType[pmd-java:typeIsExactly('java.util.Map')][not(TypeArguments)]
| //ClassType[pmd-java:typeIsExactly('java.util.concurrent.ConcurrentHashMap')][not(TypeArguments)]
]]>
                </value>
            </property>
        </properties>
        <example>
<![CDATA[
    反例：
   List list = new ArrayList<>();
    Map map = new HashMap<>();
]]>

        </example>
    </rule>

    <rule name="AvoidForEachRemoveRule"
          language="java"
          message="For循环中严禁remove,会报异常 ConcurrentModificationException"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            For循环中严禁remove,会报异常 ConcurrentModificationException
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//ForeachStatement[VariableAccess/@Name=//MethodCall[pmd-java:matchesSig('java.util.Collection#remove(_)')]/VariableAccess/@Name]
]]>
                </value>
            </property>
        </properties>
    </rule>


</ruleset>
